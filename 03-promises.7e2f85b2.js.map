{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UAE/BH,EAAKC,MAAMM,iBAAiB,QAASC,GACrCR,EAAKI,KAAKG,iBAAiB,QAASC,GACpCR,EAAKK,OAAOE,iBAAiB,QAASC,GACtCR,EAAKM,KAAKC,iBAAiB,UAY3B,SAAkBE,GAChBA,EAAMC,iBAEN,IAAK,IAAIC,EAAI,EAAGA,GAAKC,EAAUD,GAAK,EAClCE,EAAcF,EAAGG,GACdC,MAAK,EAACC,SAAEA,EAAQf,MAAEA,MACjBH,EAAAmB,OAAOC,QAAQ,qBAAqBF,QAAef,UAEpDkB,OAAM,EAACH,SAAEA,EAAQf,MAAEA,MAClBH,EAAAmB,OAAOG,QAAQ,oBAAoBJ,QAAef,UAEtDa,GAAWO,KArBf,IAAIP,EAAU,EACVO,EAAS,EACTT,EAAW,EAEf,SAASJ,IACNM,EAAUQ,OAAOtB,EAAKC,MAAMsB,OAC1BF,EAASC,OAAOtB,EAAKI,KAAKmB,OAC1BX,EAAWU,OAAOtB,EAAKK,OAAOkB,OAkBnC,SAASV,EAAcG,EAAUf,GAC/B,OAAO,IAAIuB,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAET,E,MAAUf,IAEpByB,EAAO,C,SAAEV,E,MAAUf,MAEpBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\nrefs.delay.addEventListener('input', onInput);\nrefs.step.addEventListener('input', onInput);\nrefs.amount.addEventListener('input', onInput);\nrefs.form.addEventListener('submit', onSubmit);\n\nlet delayEL = 0;\nlet stepEl = 0;\nlet amountEl = 0;\n\nfunction onInput() {\n  (delayEL = Number(refs.delay.value)),\n    (stepEl = Number(refs.step.value)),\n    (amountEl = Number(refs.amount.value));\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  for (let i = 1; i <= amountEl; i += 1) {\n    createPromise(i, delayEL)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delayEL += stepEl;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","form","addEventListener","$47d4ff9957288465$var$onInput","event","preventDefault","i","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","$47d4ff9957288465$var$delayEL","then","position","Notify","success","catch","failure","$47d4ff9957288465$var$stepEl","Number","value","Promise","resolve","reject","setTimeout","Math","random"],"version":3,"file":"03-promises.7e2f85b2.js.map"}